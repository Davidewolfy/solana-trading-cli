syntax = "proto3";

package geyser;

service Geyser {
    rpc Subscribe(stream SubscribeRequest) returns (stream SubscribeUpdate);
    rpc Ping(PingRequest) returns (PongReply);
    rpc GetLatestBlockhash(GetLatestBlockhashRequest) returns (GetLatestBlockhashReply);
    rpc GetBlockHeight(GetBlockHeightRequest) returns (GetBlockHeightReply);
    rpc GetSlot(GetSlotRequest) returns (GetSlotReply);
    rpc IsBlockhashValid(IsBlockhashValidRequest) returns (IsBlockhashValidReply);
    rpc GetVersion(GetVersionRequest) returns (GetVersionReply);
}

message SubscribeRequest {
    map<string, SubscribeRequestFilterAccounts> accounts = 1;
    map<string, SubscribeRequestFilterSlots> slots = 2;
    map<string, SubscribeRequestFilterTransactions> transactions = 3;
    map<string, SubscribeRequestFilterTransactionsStatus> transactions_status = 4;
    map<string, SubscribeRequestFilterBlocks> blocks = 5;
    map<string, SubscribeRequestFilterBlocksMeta> blocks_meta = 6;
    map<string, SubscribeRequestFilterEntry> entry = 7;
    optional CommitmentLevel commitment = 8;
    repeated SubscribeRequestAccountsDataSlice accounts_data_slice = 9;
    optional SubscribeRequestPing ping = 10;
}

message SubscribeRequestFilterAccounts {
    repeated string account = 1;
    repeated string owner = 2;
    repeated SubscribeRequestFilterAccountsFilter filters = 3;
}

message SubscribeRequestFilterAccountsFilter {
    oneof filter {
        SubscribeRequestFilterAccountsFilterMemcmp memcmp = 1;
        uint64 datasize = 2;
        bool token_account_state = 3;
    }
}

message SubscribeRequestFilterAccountsFilterMemcmp {
    uint64 offset = 1;
    oneof data {
        bytes bytes = 2;
        string base58 = 3;
        string base64 = 4;
    }
}

message SubscribeRequestFilterSlots {
    optional bool filter_by_commitment = 1;
}

message SubscribeRequestFilterTransactions {
    optional bool vote = 1;
    optional bool failed = 2;
    optional string signature = 3;
    repeated string account_include = 4;
    repeated string account_exclude = 5;
    repeated string account_required = 6;
}

message SubscribeRequestFilterTransactionsStatus {
    optional bool vote = 1;
    optional bool failed = 2;
    optional string signature = 3;
    repeated string account_include = 4;
    repeated string account_exclude = 5;
    repeated string account_required = 6;
}

message SubscribeRequestFilterBlocks {
    repeated string account_include = 1;
    optional bool include_transactions = 2;
    optional bool include_accounts = 3;
    optional bool include_entries = 4;
}

message SubscribeRequestFilterBlocksMeta {
    // Empty for now
}

message SubscribeRequestFilterEntry {
    // Empty for now
}

message SubscribeRequestAccountsDataSlice {
    uint64 offset = 1;
    uint64 length = 2;
}

message SubscribeRequestPing {
    int32 id = 1;
}

enum CommitmentLevel {
    PROCESSED = 0;
    CONFIRMED = 1;
    FINALIZED = 2;
}

message SubscribeUpdate {
    oneof update_oneof {
        SubscribeUpdateAccount account = 1;
        SubscribeUpdateSlot slot = 2;
        SubscribeUpdateTransaction transaction = 3;
        SubscribeUpdateTransactionStatus transaction_status = 4;
        SubscribeUpdateBlock block = 5;
        SubscribeUpdateBlockMeta block_meta = 6;
        SubscribeUpdateEntry entry = 7;
        SubscribeUpdatePing ping = 10;
    }
}

message SubscribeUpdateAccount {
    SubscribeUpdateAccountInfo account = 1;
    uint64 slot = 2;
    optional bool is_startup = 3;
}

message SubscribeUpdateAccountInfo {
    string pubkey = 1;
    uint64 lamports = 2;
    string owner = 3;
    bool executable = 4;
    uint64 rent_epoch = 5;
    bytes data = 6;
    uint64 write_version = 7;
    optional bytes txn_signature = 8;
}

message SubscribeUpdateSlot {
    uint64 slot = 1;
    optional uint64 parent = 2;
    CommitmentLevel status = 3;
}

message SubscribeUpdateTransaction {
    SubscribeUpdateTransactionInfo transaction = 1;
    uint64 slot = 2;
}

message SubscribeUpdateTransactionInfo {
    bytes signature = 1;
    bool is_vote = 2;
    bytes transaction = 3;
    bytes meta = 4;
    uint64 index = 5;
}

message SubscribeUpdateTransactionStatus {
    uint64 slot = 1;
    bytes signature = 2;
    bool is_vote = 3;
    uint64 index = 4;
    optional bytes err = 5;
}

message SubscribeUpdateBlock {
    uint64 slot = 1;
    string blockhash = 2;
    repeated SubscribeUpdateBlockReward rewards = 3;
    optional int64 block_time = 4;
    optional uint64 block_height = 5;
    uint64 parent_slot = 6;
    string parent_blockhash = 7;
    uint64 executed_transaction_count = 8;
    repeated SubscribeUpdateTransactionInfo transactions = 9;
    repeated SubscribeUpdateAccountInfo updated_account_info = 10;
    repeated SubscribeUpdateEntry entries = 11;
}

message SubscribeUpdateBlockMeta {
    uint64 slot = 1;
    string blockhash = 2;
    repeated SubscribeUpdateBlockReward rewards = 3;
    optional int64 block_time = 4;
    optional uint64 block_height = 5;
    uint64 parent_slot = 6;
    string parent_blockhash = 7;
    uint64 executed_transaction_count = 8;
}

message SubscribeUpdateEntry {
    uint64 slot = 1;
    uint64 index = 2;
    uint64 num_hashes = 3;
    bytes hash = 4;
    uint64 executed_transaction_count = 5;
    optional uint64 starting_transaction_index = 6;
}

message SubscribeUpdateBlockReward {
    string pubkey = 1;
    int64 lamports = 2;
    uint64 post_balance = 3;
    optional string reward_type = 4;
    optional string commission = 5;
}

message SubscribeUpdatePing {
    int32 id = 1;
}

message PingRequest {
    int32 count = 1;
}

message PongReply {
    int32 count = 1;
}

message GetLatestBlockhashRequest {
    optional CommitmentLevel commitment = 1;
}

message GetLatestBlockhashReply {
    uint64 slot = 1;
    string blockhash = 2;
    uint64 last_valid_block_height = 3;
}

message GetBlockHeightRequest {
    optional CommitmentLevel commitment = 1;
}

message GetBlockHeightReply {
    uint64 block_height = 1;
}

message GetSlotRequest {
    optional CommitmentLevel commitment = 1;
}

message GetSlotReply {
    uint64 slot = 1;
}

message IsBlockhashValidRequest {
    string blockhash = 1;
    optional CommitmentLevel commitment = 2;
}

message IsBlockhashValidReply {
    uint64 slot = 1;
    bool valid = 2;
}

message GetVersionRequest {
    // Empty
}

message GetVersionReply {
    string version = 1;
}
