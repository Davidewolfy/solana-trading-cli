name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  NODE_VERSION: '22.2.0'
  RUST_VERSION: '1.70'

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag=${VERSION}" >> $GITHUB_OUTPUT
        echo "Release version: ${VERSION}"
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: v1.0.0"
          exit 1
        fi
        
    - name: Check if tag exists
      run: |
        TAG="${{ steps.version.outputs.tag }}"
        if git rev-parse "$TAG" >/dev/null 2>&1; then
          echo "Tag $TAG already exists"
          exit 1
        fi

  build:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: validate
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        override: true
        target: ${{ matrix.target }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build TypeScript
      run: npm run build
      
    - name: Build Rust executor
      run: |
        cd exec-rs
        cargo build --release
        
    - name: Create platform-specific archive
      shell: bash
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        OS_NAME="${{ matrix.os }}"
        
        # Determine platform name
        case "$OS_NAME" in
          ubuntu-latest) PLATFORM="linux-x64" ;;
          macos-latest) PLATFORM="darwin-x64" ;;
          windows-latest) PLATFORM="win-x64" ;;
        esac
        
        # Create release directory
        RELEASE_DIR="solana-trading-cli-${VERSION}-${PLATFORM}"
        mkdir -p "$RELEASE_DIR"
        
        # Copy built files
        cp -r dist/ "$RELEASE_DIR/"
        cp -r kestra/ "$RELEASE_DIR/"
        cp -r scripts/ "$RELEASE_DIR/"
        cp docker-compose*.yml "$RELEASE_DIR/"
        cp Makefile "$RELEASE_DIR/"
        cp README.md "$RELEASE_DIR/"
        cp QUICK-START.md "$RELEASE_DIR/"
        cp LICENSE "$RELEASE_DIR/"
        
        # Copy Rust executor
        if [ "$OS_NAME" = "windows-latest" ]; then
          cp exec-rs/target/release/exec-rs.exe "$RELEASE_DIR/"
        else
          cp exec-rs/target/release/exec-rs "$RELEASE_DIR/"
        fi
        
        # Create archive
        if [ "$OS_NAME" = "windows-latest" ]; then
          7z a "${RELEASE_DIR}.zip" "$RELEASE_DIR"
          echo "ARCHIVE_NAME=${RELEASE_DIR}.zip" >> $GITHUB_ENV
        else
          tar -czf "${RELEASE_DIR}.tar.gz" "$RELEASE_DIR"
          echo "ARCHIVE_NAME=${RELEASE_DIR}.tar.gz" >> $GITHUB_ENV
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-${{ matrix.os }}
        path: ${{ env.ARCHIVE_NAME }}

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: validate
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.validate.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.validate.outputs.version }}
          type=raw,value=latest
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build, docker]
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        echo "# Release $VERSION" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        if [ -n "$PREV_TAG" ]; then
          echo "## Changes since $PREV_TAG" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get commits since last tag
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "- Initial release of Solana Trading CLI" >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "## Features" >> CHANGELOG.md
        echo "- 🔄 Unified Multi-DEX Router (Jupiter, Raydium, Orca, Meteora)" >> CHANGELOG.md
        echo "- 📡 Real-time Yellowstone gRPC Streaming" >> CHANGELOG.md
        echo "- 🎯 Advanced Trading Strategies (Launch momentum, Micro-breakout)" >> CHANGELOG.md
        echo "- 🤖 ASI-Arch ML System with autonomous model search" >> CHANGELOG.md
        echo "- 🔐 Enterprise Security with Infisical integration" >> CHANGELOG.md
        echo "- 📊 Production Monitoring (Grafana, Prometheus)" >> CHANGELOG.md
        echo "- 🐳 Complete Docker deployment" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        echo "## Installation" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Docker (Recommended)" >> CHANGELOG.md
        echo '```bash' >> CHANGELOG.md
        echo "docker run -d --name solana-trading-cli \\" >> CHANGELOG.md
        echo "  -p 8080:8080 -p 3000:3000 \\" >> CHANGELOG.md
        echo "  ghcr.io/${{ github.repository }}:$VERSION" >> CHANGELOG.md
        echo '```' >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        echo "### Binary Download" >> CHANGELOG.md
        echo "Download the appropriate binary for your platform from the assets below." >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        echo "## Quick Start" >> CHANGELOG.md
        echo '```bash' >> CHANGELOG.md
        echo "# One-command deployment" >> CHANGELOG.md
        echo "make all" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "# Test strategies safely" >> CHANGELOG.md
        echo "make test-strategies" >> CHANGELOG.md
        echo '```' >> CHANGELOG.md
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate.outputs.tag }}
        name: Release ${{ needs.validate.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        files: |
          release-ubuntu-latest/*.tar.gz
          release-macos-latest/*.tar.gz
          release-windows-latest/*.zip
        token: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Release Notifications
    runs-on: ubuntu-latest
    needs: [validate, release]
    if: always()
    
    steps:
    - name: Notify Discord
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      with:
        args: |
          🚀 **New Release: ${{ needs.validate.outputs.version }}**
          
          Solana Trading CLI has been released!
          
          **Features:**
          - Unified Multi-DEX Router
          - Real-time gRPC Streaming  
          - ML Trading Strategies
          - Production Monitoring
          
          **Download:** https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.tag }}
          
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      with:
        status: ${{ job.status }}
        channel: '#releases'
        text: |
          🚀 Release ${{ needs.validate.outputs.version }} is now available!
          
          Download: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.tag }}
          Docker: `docker pull ghcr.io/${{ github.repository }}:${{ needs.validate.outputs.version }}`

  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate, release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update version in files
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        
        # Update package.json version
        sed -i "s/\"version\": \".*\"/\"version\": \"${VERSION#v}\"/" package.json
        
        # Update Cargo.toml version
        sed -i "s/version = \".*\"/version = \"${VERSION#v}\"/" exec-rs/Cargo.toml
        
        # Update README badges
        sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/${VERSION}/g" README.md
        
    - name: Commit version updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json exec-rs/Cargo.toml README.md
        git commit -m "chore: bump version to ${{ needs.validate.outputs.version }}" || exit 0
        git push
