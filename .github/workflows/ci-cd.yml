name: CI/CD Pipeline

on:
  push:
    branches: [ main, typescript-main, develop ]
  pull_request:
    branches: [ main, typescript-main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '22.2.0'
  RUST_VERSION: '1.70'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality & Testing
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        override: true
        components: rustfmt, clippy
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          exec-rs/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: TypeScript build
      run: npm run build
      
    - name: TypeScript lint
      run: npm run lint
      continue-on-error: true
      
    - name: TypeScript tests
      run: npm test
      continue-on-error: true
      
    - name: Rust format check
      run: cd exec-rs && cargo fmt -- --check
      
    - name: Rust lint
      run: cd exec-rs && cargo clippy -- -D warnings
      
    - name: Rust tests
      run: cd exec-rs && cargo test
      
    - name: Rust build
      run: cd exec-rs && cargo build --release
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          dist/
          exec-rs/target/release/exec-rs
        retention-days: 7

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=high
      continue-on-error: true
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true
      
    - name: Rust security audit
      run: |
        cargo install cargo-audit
        cd exec-rs && cargo audit
      continue-on-error: true

  # Docker Build & Push
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name != 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: kestra
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        
    - name: Create test environment
      run: |
        cp .env.example .env
        echo "RPC_URL=https://api.devnet.solana.com" >> .env
        echo "YELLOWSTONE_ENDPOINT=grpc.triton.one:443" >> .env
        echo "REQUIRE_DRY_RUN=true" >> .env
        
    - name: Create test wallet
      run: |
        mkdir -p secrets
        echo '[174,101,213,156,187,121,234,123,45,67,89,12,34,56,78,90,123,45,67,89,12,34,56,78,90,123,45,67,89,12,34,56,78,90,123,45,67,89,12,34,56,78,90,123,45,67,89,12,34,56,78,90,123,45,67]' > secrets/wallet.json
        
    - name: Start services
      run: |
        docker-compose -f docker-compose.kestra.yml up -d
        sleep 30
        
    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
        
    - name: Run integration tests
      run: |
        # Test health endpoints
        curl -f http://localhost:8080/health
        
        # Test strategy shadow mode
        curl -X POST http://localhost:8080/api/v1/executions/solana.strategies/strategy-shadow-mode \
          -H "Content-Type: application/json" \
          -d '{"inputs": {"duration": "PT2M", "strategies": ["launch_momentum"]}}' || true
          
    - name: Collect logs
      if: failure()
      run: |
        docker-compose -f docker-compose.kestra.yml logs
        
    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.kestra.yml down -v

  # Deployment
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production..."
        echo "This would deploy to your production environment"
        echo "Configure your deployment steps here"
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          Deployment ${{ job.status }}!
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}

  # Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [integration]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate changelog
      id: changelog
      run: |
        echo "## Changes" > CHANGELOG.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md
        
    - name: Update release
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const changelog = fs.readFileSync('CHANGELOG.md', 'utf8');
          
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: context.payload.release.id,
            body: changelog
          });

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy, release]
    if: always()
    
    steps:
    - name: Delete old artifacts
      uses: actions/github-script@v6
      with:
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const oldArtifacts = artifacts.data.artifacts
            .filter(artifact => {
              const age = Date.now() - new Date(artifact.created_at).getTime();
              return age > 7 * 24 * 60 * 60 * 1000; // 7 days
            });
            
          for (const artifact of oldArtifacts) {
            await github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id,
            });
          }
