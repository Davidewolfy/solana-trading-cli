id: infisical-secrets
namespace: solana.config

description: |
  Infisical Secret Management Integration
  Loads secrets from Infisical and validates configuration

inputs:
  - id: environment
    type: STRING
    required: false
    defaults: "dev"
    description: "Environment to load secrets from (dev/staging/prod)"
    
  - id: validateOnly
    type: BOOLEAN
    required: false
    defaults: false
    description: "Only validate secrets without loading"

variables:
  projectRoot: "/app/solana-trading-cli"
  nodeVersion: "22.2.0"

tasks:
  - id: validate-infisical-config
    type: io.kestra.plugin.scripts.node.Script
    description: "Validate Infisical configuration"
    nodeVersion: "{{ vars.nodeVersion }}"
    workingDirectory: "{{ vars.projectRoot }}"
    timeout: "PT30S"
    script: |
      console.log('🔐 Validating Infisical configuration...');
      
      const requiredEnvVars = [
        'INFISICAL_CLIENT_ID',
        'INFISICAL_CLIENT_SECRET',
        'INFISICAL_PROJECT_ID'
      ];
      
      const missing = requiredEnvVars.filter(envVar => !process.env[envVar]);
      
      if (missing.length > 0) {
        console.error('❌ Missing Infisical environment variables:', missing);
        console.log('Please set these in your .env file:');
        missing.forEach(envVar => {
          console.log(`  ${envVar}=your_value_here`);
        });
        throw new Error('Missing required Infisical configuration');
      }
      
      console.log('✅ Infisical configuration is valid');
      console.log(`   Project ID: ${process.env.INFISICAL_PROJECT_ID}`);
      console.log(`   Environment: ${process.env.INFISICAL_ENVIRONMENT || 'dev'}`);

  - id: load-secrets
    type: io.kestra.plugin.scripts.node.Script
    description: "Load secrets from Infisical"
    nodeVersion: "{{ vars.nodeVersion }}"
    workingDirectory: "{{ vars.projectRoot }}"
    dependsOn: [validate-infisical-config]
    timeout: "PT60S"
    script: |
      const { createInfisicalManager } = require('./dist/config/infisical');
      
      console.log('🔐 Loading secrets from Infisical...');
      
      try {
        const manager = createInfisicalManager();
        await manager.initialize();
        
        const secrets = manager.getSecrets();
        
        if (!secrets) {
          throw new Error('Failed to load secrets from Infisical');
        }
        
        console.log('✅ Successfully loaded secrets from Infisical');
        console.log(`   Environment: {{ inputs.environment }}`);
        console.log(`   Secrets loaded: ${Object.keys(secrets).length}`);
        
        // Log non-sensitive secret keys
        const secretKeys = Object.keys(secrets).filter(key => 
          !key.includes('PRIVATE_KEY') && 
          !key.includes('SECRET') && 
          !key.includes('TOKEN') &&
          !key.includes('WEBHOOK')
        );
        
        console.log('   Available secrets:', secretKeys.join(', '));
        
        // Validate required secrets
        const isValid = manager.validateSecrets();
        if (!isValid) {
          throw new Error('Secret validation failed');
        }
        
        // Export to environment if not validate-only mode
        if (!{{ inputs.validateOnly }}) {
          manager.exportToEnv();
          console.log('✅ Secrets exported to environment variables');
        }
        
        // Store secrets for next tasks
        global.tradingSecrets = secrets;
        
      } catch (error) {
        console.error('❌ Failed to load secrets from Infisical:', error.message);
        
        // Fallback to local .env
        console.log('🔄 Falling back to local .env configuration...');
        require('dotenv').config();
        
        const fallbackSecrets = {
          RPC_URL: process.env.RPC_URL,
          YELLOWSTONE_ENDPOINT: process.env.YELLOWSTONE_ENDPOINT,
          MAX_TRADE_AMOUNT: process.env.MAX_TRADE_AMOUNT,
          MAX_SLIPPAGE_BPS: process.env.MAX_SLIPPAGE_BPS,
          REQUIRE_DRY_RUN: process.env.REQUIRE_DRY_RUN
        };
        
        console.log('⚠️ Using fallback configuration from .env');
        global.tradingSecrets = fallbackSecrets;
      }

  - id: test-secret-access
    type: io.kestra.plugin.scripts.node.Script
    description: "Test secret access and configuration"
    nodeVersion: "{{ vars.nodeVersion }}"
    workingDirectory: "{{ vars.projectRoot }}"
    dependsOn: [load-secrets]
    timeout: "PT30S"
    script: |
      console.log('🧪 Testing secret access...');
      
      const secrets = global.tradingSecrets;
      
      if (!secrets) {
        throw new Error('No secrets available for testing');
      }
      
      // Test RPC connectivity
      if (secrets.RPC_URL) {
        console.log('🔗 Testing RPC connectivity...');
        
        try {
          const response = await fetch(secrets.RPC_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              jsonrpc: '2.0',
              id: 1,
              method: 'getHealth'
            })
          });
          
          if (response.ok) {
            console.log('✅ RPC endpoint is accessible');
          } else {
            console.warn('⚠️ RPC endpoint returned non-200 status:', response.status);
          }
        } catch (error) {
          console.warn('⚠️ RPC connectivity test failed:', error.message);
        }
      }
      
      // Test Yellowstone endpoint format
      if (secrets.YELLOWSTONE_ENDPOINT) {
        const endpoint = secrets.YELLOWSTONE_ENDPOINT;
        if (endpoint.includes(':443') || endpoint.includes(':9090')) {
          console.log('✅ Yellowstone endpoint format looks correct');
        } else {
          console.warn('⚠️ Yellowstone endpoint might be missing port');
        }
      }
      
      // Validate trading limits
      if (secrets.MAX_TRADE_AMOUNT) {
        const maxAmount = parseInt(secrets.MAX_TRADE_AMOUNT);
        if (maxAmount > 0 && maxAmount <= 10000000000) { // 10 SOL max
          console.log('✅ Trading limits are reasonable');
        } else {
          console.warn('⚠️ Trading limits might be too high or invalid');
        }
      }
      
      console.log('✅ Secret access test completed');

  - id: generate-config-summary
    type: io.kestra.plugin.scripts.node.Script
    description: "Generate configuration summary"
    nodeVersion: "{{ vars.nodeVersion }}"
    workingDirectory: "{{ vars.projectRoot }}"
    dependsOn: [test-secret-access]
    script: |
      console.log('📋 Configuration Summary');
      console.log('========================');
      
      const secrets = global.tradingSecrets;
      
      if (!secrets) {
        console.log('❌ No configuration available');
        return;
      }
      
      console.log(`Environment: {{ inputs.environment }}`);
      console.log(`Validate Only: {{ inputs.validateOnly }}`);
      console.log('');
      
      console.log('🔗 Network Configuration:');
      console.log(`  RPC URL: ${secrets.RPC_URL ? '✅ Set' : '❌ Missing'}`);
      console.log(`  Yellowstone: ${secrets.YELLOWSTONE_ENDPOINT ? '✅ Set' : '❌ Missing'}`);
      console.log('');
      
      console.log('💰 Trading Configuration:');
      console.log(`  Max Trade Amount: ${secrets.MAX_TRADE_AMOUNT || 'Not set'}`);
      console.log(`  Max Slippage: ${secrets.MAX_SLIPPAGE_BPS || 'Not set'} bps`);
      console.log(`  Dry Run Required: ${secrets.REQUIRE_DRY_RUN || 'false'}`);
      console.log('');
      
      console.log('🔐 Security:');
      console.log(`  Wallet Key: ${secrets.WALLET_PRIVATE_KEY ? '✅ Set' : '❌ Missing'}`);
      console.log(`  API Keys: ${secrets.JUPITER_API_KEY ? '✅ Set' : '⚠️ Optional'}`);
      console.log('');
      
      console.log('📊 Monitoring:');
      console.log(`  Slack Webhook: ${secrets.SLACK_WEBHOOK ? '✅ Set' : '⚠️ Optional'}`);
      console.log(`  Discord Webhook: ${secrets.DISCORD_WEBHOOK ? '✅ Set' : '⚠️ Optional'}`);
      console.log('');
      
      const readyForTrading = secrets.RPC_URL && 
                             secrets.YELLOWSTONE_ENDPOINT && 
                             secrets.MAX_TRADE_AMOUNT && 
                             secrets.MAX_SLIPPAGE_BPS;
      
      if (readyForTrading) {
        console.log('🎯 Status: Ready for trading!');
      } else {
        console.log('⚠️ Status: Configuration incomplete');
      }

triggers:
  - id: webhook-secrets-reload
    type: io.kestra.plugin.core.trigger.Webhook
    description: "Webhook to reload secrets from Infisical"
    key: "reload-secrets-webhook"

  - id: scheduled-secrets-refresh
    type: io.kestra.plugin.core.trigger.Schedule
    description: "Scheduled secrets refresh"
    cron: "0 0 */6 * * ?" # Every 6 hours
    disabled: true
    inputs:
      environment: "prod"
      validateOnly: false

labels:
  environment: "config"
  project: "solana-secrets"
  version: "1.0.0"
  type: "secret-management"
